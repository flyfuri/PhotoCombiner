import tkinter as tk
from tkinter import ttk 
from tkinter import Frame
from tkinter import Button
from tkinter import Label
from tkinter import filedialog
import tkinter.messagebox as tkmsgbox
import os
import re
from datetime import datetime
import copy
from shutil import copy2 as shutilcopy2

import helperfunctions as hlpfnc
import pic_row_canvas as prcanvas

CURSORTEXT_OFFX = 5
CURSORTEXT_OFFY = 22
TLCANVAS_W = 4000
TLCANVAS_H = 500
BUTTON_H = 2
TLINE_ITEM_COLORS = (
            'red', 'green', 'blue', 'yellow', 'magenta', 'cyan', 'orange', 'purple',
            'dark green', 'navy', 'maroon', 'olive', 'teal', 'brown', 'slate gray'
        )
BG_COLOR = 'lightgray'

class App():

    def __init__ (self):
        self.glob_workpath = None  # global workpath (folder)
        self.glob_list_sourcedir = [] # global list of source directories (subfolders) in workpath folder
        self.glob_list_pics = [] # global list of files workpath folder (without subfolder)
        #self.glob_list_sources = [] # global list of sources (cameras) for timeline
        self.glob_timelinetable = [] # table used to draw timeline
        self.glob_tstamp_min = 0
        self.glob_tstamp_max = 0
        self.glob_tline_start_pix = 0
        self.glob_tline_end_pix = TLCANVAS_W
        self.glob_tline_factor_pix = 1
        self.glob_draging_tlitem = False #mouse is draging an item on the timeline
        self.glob_move_mode_all = 0 # which pics to move on the timeline: 0=just the one, 1=all with same source
        self.glob_pics_to_show = [] #pics to show in picture row
        self.glob_center_pic = None #pic to show on center

       # graphical elements
        self.rootW = None
        self.frame1 = None
        self.frame3 = None
        self.canvas_Tline = None
        self.timescroll = None
        self.cursorText = None
        self.btn_workpath = None
        self.btn_merge = None
        self.btn_rename = None
        self.create_window()

    def create_window(self):
        self.rootW = tk.Tk()
        self.rootW.title("PhotoCombiner")
        self.rootW.resizable(width=True, height=True)
        self.rootW.minsize(800, 600)
        self.rootW.geometry('800x600')
        self.rootW.state('zoomed')

        # frame 1 working path and buttons
        self.frame1 = Frame(self.rootW, bg=BG_COLOR)
        self.frame1.pack(side=tk.TOP, fill=tk.X, expand=False, pady=(0, 0))
        lbl_workpath = Label(self.frame1, height=BUTTON_H, text="working path(folder):")
        self.var_workpathvalue = tk.StringVar()
        lbl_workpathvalue = Label(self.frame1, textvariable=self.var_workpathvalue)
        self.btn_workpath = tk.Button(self.frame1, height=BUTTON_H, width=3, text="...",command=self.on_click_btn_workpath)
        lbl_workpath.pack(side=tk.LEFT, padx=(5,0), pady=(2,2))
        lbl_workpathvalue.pack(side=tk.LEFT, padx=(5,0))
        self.btn_workpath.pack(side=tk.LEFT, padx=5)
        self.btn_merge = tk.Button(self.frame1, height=BUTTON_H, text="merge from sources",command=self.on_click_btn_merge, state=tk.DISABLED)
        self.btn_merge.pack(side=tk.LEFT, pady=(2,2))
        self.btn_rename = tk.Button(self.frame1, height=BUTTON_H, text="rename moved pics",command=self.on_click_btn_rename, state=tk.DISABLED)
        self.btn_rename.pack(side=tk.LEFT, pady=(2,2))
        
        # frame 2 Canvas picture row
        self.frame2 = Frame(self.rootW, bg=BG_COLOR)
        self.frame2.pack(side=tk.TOP, expand=0, fill=tk.X , pady=(0, 0))
        self.canvas_picrow = prcanvas.PicRowCanvas(self.frame2, bg=BG_COLOR)
        self.canvas_picrow.pack(side=tk.BOTTOM, expand=False, fill=tk.X)

        # frame 3 Canvas timeline
        self.frame3 = Frame(self.rootW, bg=BG_COLOR)
        self.frame3.pack(side=tk.TOP, expand=0, fill=tk.X, pady=(0, 0))
        self.lbl_curs_pos = Label(self.frame3, text = "0")
        self.lbl_curs_pos.pack(side=tk.BOTTOM)
        self.canvas_Tline = tk.Canvas(self.frame3, bg='white', height=TLCANVAS_H, scrollregion=(0,0,TLCANVAS_W, TLCANVAS_H))
        self.timescroll = tk.Scrollbar(self.frame3, orient='horizontal', command=self.canvas_Tline.xview)
        self.timescroll.pack(side=tk.BOTTOM, fill=tk.X)
        self.canvas_Tline.pack(side=tk.BOTTOM, expand=False, fill=tk.X)
        self.canvas_Tline.configure(xscrollcommand=self.timescroll.set)
        self.cursorText = self.canvas_Tline.create_text(1, 1, fill='black', text='')

         
    
    ### events

    def on_click_btn_workpath(self):
        self.set_workpath_read_files()
        if len(self.glob_list_sourcedir) > 0:
            self.btn_merge.configure(state=tk.NORMAL)
        if len(self.glob_list_pics) > 0:
                self.create_timeline()

    def on_click_btn_merge(self):
        self.rootW.config(cursor='watch')
        if self.glob_workpath is not None:
            self.merge_pics_from_sourcefolders(self.glob_workpath)
        if len(self.glob_list_pics) > 0:
                self.create_timeline()
        self.rootW.config(cursor='')
        

    def on_click_btn_rename(self):
        self.rootW.config(cursor='watch')
        if self.glob_workpath is not None and len(self.glob_list_pics) > 0:
            hlpfnc.rename_moved_files(self.glob_timelinetable, self.glob_workpath)

        self.set_workpath_read_files(path=self.glob_workpath)
        if len(self.glob_list_pics) > 0:
                self.create_timeline()
        self.rootW.config(cursor='')


    def on_tlitem_mouse_down(self, event):
        self.glob_draging_tlitem = True
        event.widget.drag_data = {'x': event.x + self.canvas_Tline.xview()[0]*TLCANVAS_W}
        self.canvas_Tline.scan_mark(event.x, 0)  
        

    def on_tlitem_drag_motion(self, event):
        x = event.x + self.canvas_Tline.xview()[0]*TLCANVAS_W - event.widget.drag_data['x']
        tag = event.widget.gettags(tk.CURRENT)[self.glob_move_mode_all]
        self.canvas_Tline.move(tag, x, 0)
        #event.widget.move(tk.CURRENT, x, 0)
        event.widget.drag_data = {'x': event.x + self.canvas_Tline.xview()[0]*TLCANVAS_W}
        self.canvas_Tline.scan_dragto(event.x, 0, gain=-2)

        #update new_timestamps
        new_x = event.x + self.canvas_Tline.xview()[0]*TLCANVAS_W
        pic_name, pic_source = event.widget.gettags(tk.CURRENT)[:2]
        source_index = hlpfnc.get_source_index(self.glob_timelinetable, pic_source)
        if source_index > -1:
            pic_index = hlpfnc.get_picname_index(self.glob_timelinetable, pic_name)
            if pic_index > -1:
                tstamp_at_cursor = self.pixel_to_tstamp(new_x)
                if self.glob_move_mode_all == 0:
                  self.glob_timelinetable[source_index][pic_index][2] = tstamp_at_cursor
                  self.canvas_Tline.itemconfig('itm_txt' + pic_name, 
                                               text='(' + hlpfnc.timestamp_to_filenamedatetm(tstamp_at_cursor) + ')  ' + pic_name) # update new date in time-line item
                elif self.glob_move_mode_all == 1:
                    delta_x = self.pixel_to_tstamp(new_x) - self.glob_timelinetable[source_index][pic_index][2]
                    for i in range(len(self.glob_timelinetable[source_index])):
                        new_tstamp = self.glob_timelinetable[source_index][i][2] + delta_x
                        self.glob_timelinetable[source_index][i][2] = new_tstamp
                        tmp_pic_name = self.glob_timelinetable[source_index][i][0]
                        self.canvas_Tline.itemconfig(tagOrId='itm_txt' + self.glob_timelinetable[source_index][i][0],
                                                     text='(' + hlpfnc.timestamp_to_filenamedatetm(new_tstamp) + ')  ' + tmp_pic_name) # update new date in time-line item

                self.update_pic_row(tstamp_center_pic=tstamp_at_cursor, i_source=source_index, i_pic=pic_index)


    def on_tlitem_mouse_up(self, event):
        self.btn_rename.configure(state=tk.NORMAL)     
        self.glob_draging_tlitem = False


    def on_tlitem_mouse_over(self, event):
        if not self.glob_draging_tlitem:
            pic_name, pic_source = event.widget.gettags(tk.CURRENT)[:2]
            source_index = hlpfnc.get_source_index(self.glob_timelinetable, pic_source)
            if source_index > -1:
                pic_index = hlpfnc.get_picname_index(self.glob_timelinetable, pic_name)
                if pic_index > -1:
                    tstamp_at_cursor = self.glob_timelinetable[source_index][pic_index][2]
                    self.update_pic_row(tstamp_center_pic=tstamp_at_cursor, i_source=source_index, i_pic=pic_index)


    def on_move_mode_change(self, event, mode):
        if mode == 0:
            self.glob_move_mode_all = 0
            self.canvas_Tline.itemconfigure(self.cursorText, text="1")
        else: 
            self.glob_move_mode_all = 1
            self.canvas_Tline.itemconfigure(self.cursorText, text="source")


    def on_tlcanvas_right_click(self, event):
        # Create a menu
        popup_menu = tk.Menu(self.rootW, tearoff=0)
        popup_menu.add_command(label="move this pic only", command=lambda: self.on_move_mode_change(event, mode=0))
        popup_menu.add_command(label="move all pics from same source", command=lambda: self.on_move_mode_change(event, mode=1))
        # Display the menu at the right-click position
        popup_menu.post(event.x_root, event.y_root)


    def on_mouse_motion_canvas(self, event):
        self.canvas_Tline.coords(self.cursorText, event.x + CURSORTEXT_OFFX + self.canvas_Tline.xview()[0]*TLCANVAS_W,
                                 event.y + CURSORTEXT_OFFY) 
        self.lbl_curs_pos.configure(text=hlpfnc.tstamp_to_nice_date((event.x + self.canvas_Tline.xview()[0]*TLCANVAS_W),
                                                                    self.glob_tline_factor_pix,
                                                                    self.glob_tstamp_min))
        if event.x < 10:
            self.canvas_Tline.xview_scroll(-1, "units")
        elif event.x > self.canvas_Tline.winfo_width() - 10:
            self.canvas_Tline.xview_scroll(1, "units")


    def on_mouse_enter_canvas(self, event):
        if self.glob_move_mode_all == 0:
            self.canvas_Tline.itemconfigure(self.cursorText, text="1")
        elif self.glob_move_mode_all == 1: 
            self.canvas_Tline.itemconfigure(self.cursorText, text="all")
        

    def on_mouse_leave_canvas(self, event):
        self.canvas_Tline.itemconfigure(self.cursorText, text='')  #trick to make label disapear when cursor not over canvas 


    def update_pic_row(self, tstamp_center_pic, i_source, i_pic):
        self.glob_center_pic = self.glob_timelinetable[i_source][i_pic][0] + self.glob_timelinetable[i_source][i_pic][4]
        self.glob_pics_to_show = hlpfnc.getpics_around_actual_tstamp(self.glob_timelinetable, tstamp_center_pic, 3, 3)
        self.canvas_picrow.set_all_pics(list_pic_paths=[os.path.join(self.glob_workpath, pic) for pic in self.glob_pics_to_show],
                                                path_centerpic=os.path.join(self.glob_workpath,self.glob_center_pic))


    def create_tlitem_for_pic(self, tstamp , description, source, color='#a2a5a6', text="des",):
        x = self.tstamp_to_pixel(tstamp)
        y = 15  # Adjust the y-position if needed
        act_tags = [description, source, ('itm_triangle' + description)]
        item_triangle = self.canvas_Tline.create_polygon(x, y, x-5, y-10, x+5, y-10, fill=color, tags=act_tags)
        act_tags[2] = 'itm_line' + description
        item_line = self.canvas_Tline.create_line(x, y, x, y+40, fill=color, tags=act_tags) 
        act_tags[2] = 'itm_txt' + description
        item_text = self.canvas_Tline.create_text(x, y + 65, angle=90, anchor=tk.E, fill=color, 
                                             text=description if text == "des" else text, font=13,
                                             tags=act_tags)
        self.canvas_Tline.bind('<ButtonPress-3>', self.on_tlcanvas_right_click)
        self.canvas_Tline.tag_bind(description, '<ButtonPress-1>', self.on_tlitem_mouse_down)
        self.canvas_Tline.tag_bind(description, '<B1-Motion>', self.on_tlitem_drag_motion)
        self.canvas_Tline.tag_bind(description, '<ButtonRelease-1>', self.on_tlitem_mouse_up)  
        self.canvas_Tline.tag_bind(description, '<Enter>', self.on_tlitem_mouse_over)
        self.canvas_Tline.bind("<Enter>", self.on_mouse_enter_canvas)
        self.canvas_Tline.bind("<Leave>", self.on_mouse_leave_canvas)
        self.canvas_Tline.bind("<Motion>", self.on_mouse_motion_canvas)
         

    ### functions

    def set_workpath_read_files(self, path=None):
        # Open a file dialog for opening a file
        if path is None:
            self.glob_workpath = filedialog.askdirectory()
        elif os.path.isdir(path):
            self.glob_workpath=path

        if self.glob_workpath is not None:
            item_list = os.listdir(self.glob_workpath)
            self.glob_list_sourcedir = list(filter(lambda x: os.path.isdir(os.path.join(self.glob_workpath, x)), item_list))
            self.glob_list_pics = list(filter(lambda x: hlpfnc.is_pic(x) or hlpfnc.is_video(x), item_list))
            self.var_workpathvalue.set(self.glob_workpath)


    def draw_scaletick(self, interval=3600, length=100, width=1, color='#a2a5a6', utcoffs_h=0):
        tick_t = interval - self.glob_tstamp_min % interval + utcoffs_h * 3600
        tick = int(tick_t * self.glob_tline_factor_pix) + self.glob_tline_start_pix 
        while tick <= self.glob_tline_end_pix:
            line = self.canvas_Tline.create_line(tick, 0, tick, length, fill=color, tags='ticks', width=width)
            tick = tick + interval * self.glob_tline_factor_pix


    def draw_tlitems_for_source(self, srctable, color):
        for record in srctable:
            self.create_tlitem_for_pic(record[1], hlpfnc.calc_text_timeline_item(record), record[3], color)


    def create_timeline(self): 
        #list_sources = [x[0][3] for x in self.glob_timelinetable]
        self.canvas_Tline.delete('all')         
        self.glob_timelinetable = hlpfnc.create_timeline_table(self.glob_list_pics)
        self.glob_tstamp_min, self.glob_tstamp_max = hlpfnc.calc_tline_minmax(self.glob_timelinetable)
        self.glob_tstamp_min -= 3600
        self.glob_tstamp_max += 3600
        self.glob_tline_start_pix, self.glob_tline_end_pix, self.glob_tline_factor_pix = hlpfnc.calc_tline_minmax_pixel(0,TLCANVAS_W,self.glob_tstamp_min, self.glob_tstamp_max)
        self.draw_scaletick(900, length=50, width=1, utcoffs_h=0)
        self.draw_scaletick(3600, length=100, width=2, utcoffs_h=0)
        self.draw_scaletick(86400, length=200, width=3, utcoffs_h=0) #days 24*3600
        for i, source in enumerate(self.glob_timelinetable):
            self.draw_tlitems_for_source(source, TLINE_ITEM_COLORS[i % len(TLINE_ITEM_COLORS)])


    def tstamp_to_pixel(self, tstamp):
        return round(self.glob_tline_start_pix + (tstamp-self.glob_tstamp_min)*self.glob_tline_factor_pix)
    
    def pixel_to_tstamp(self, pixel):
        return round(self.glob_tstamp_min + (pixel-self.glob_tline_start_pix)/self.glob_tline_factor_pix)


    def check_exists_ask_overwrite(self, destpath):
        if os.path.exists(destpath):
            path = os.path.dirname(destpath)
            name, ext = os.path.splitext(os.path.basename(destpath))
            answer = tkmsgbox.askyesnocancel(title="file " + name + ext + " exists already", message="overwrite? YES=overwrite, NO=copy, CANCEL=skip that file")
            if answer == False: 
                i = 2
                regex = r'\([2-9]\)'
                match0 = re.search(regex, name)
                if  match0:
                    regex = r'[2-9]'
                    match = re.search(regex, match0.group())
                    i = int(match.group()) + 1
                    name = name[0 : str(name).rfind("(")]
                name = name + "(" + str(i) + ")" 
                destpath = os.path.join(path, name + ext)
                destpath = self.check_exists_ask_overwrite(destpath)
            elif answer == None:
                destpath = None
        return destpath


    def merge_pics_from_sourcefolders(self, workpath):
        item_list = os.listdir(workpath)
        self.glob_list_sourcedir = list(filter(lambda x: os.path.isdir(os.path.join(workpath, x)), item_list))
        act_folderpath = workpath
        for folder in self.glob_list_sourcedir:
            act_folderpath = os.path.join(workpath, folder)
            pic_list = [file for file in os.listdir(act_folderpath) if hlpfnc.is_pic(file) or hlpfnc.is_video(file)] 
            newname_list = copy.deepcopy(pic_list)
            for i, pic in enumerate(pic_list):
                pic_name, pic_ext = os.path.splitext(pic)
                if hlpfnc.is_video(pic):
                    tmp_name = "VID" 
                else:
                    tmp_name = "IMG"
                tmp_datetimepatrn = hlpfnc.get_date_time_from_name(pic_name)
                if tmp_datetimepatrn == None: # take creation time if not in name already
                    creation_time_sec1970 = os.path.getctime(os.path.join(act_folderpath, pic))
                    tmp_datetimepatrn = hlpfnc.timestamp_to_filenamedatetm(creation_time_sec1970)
                    tmp_info = pic_name[pic_name.find("_") : ]
                else:
                    tmp_info = pic_name[pic_name.find(tmp_datetimepatrn)+len(tmp_datetimepatrn) : ]
                tmp_name = tmp_name + "_" +  tmp_datetimepatrn + "__" + tmp_info
                if pic.find("PANO") > -1:
                    tmp_name = tmp_name + "_" + "PANO"
                tmp_name = tmp_name + "_" + folder + pic_ext
                newname_list[i] = tmp_name
                
            for i, pic in enumerate(pic_list):
                act_destpath = os.path.join(workpath, newname_list[i])
                act_destpath = self.check_exists_ask_overwrite(act_destpath)
                print(pic)
                if act_destpath != None:
                    print(os.path.basename(act_destpath))
                else:
                    print(newname_list[i])
                if act_destpath == None:
                    print("skiped!\n")
                else:
                    try:
                        shutilcopy2(os.path.join(act_folderpath, pic), act_destpath)
                        print("OK (copied successful)")
                    except Exception as e:
                        print("error:" + str(e))
                    finally:
                        print('\n') 
        
        item_list = os.listdir(workpath)
        self.glob_list_pics = list(filter(lambda x: hlpfnc.is_pic(x) or hlpfnc.is_video(x), item_list))



app = App()
app.rootW.mainloop()